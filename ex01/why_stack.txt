In the RPN (Reverse Polish Notation) exercise, using std::stack<int> _stack; is the perfect container choice for several reasons:

RPN calculation algorithm naturally uses a stack:

In RPN, operands come before operators (e.g., "3 4 +" means 3+4)
The standard algorithm for evaluating RPN expressions pushes numbers onto a stack and pops operands when operators are encountered
Stack operations match RPN processing:

Numbers are pushed onto the stack as they're encountered
When an operator appears, you pop the required number of operands, perform the operation, and push the result back
The LIFO (Last-In-First-Out) nature of stacks perfectly matches this behavior
Efficiency of operations:

You only need push and pop operations, which are O(1) in std::stack
No need for random access or insertion/deletion at arbitrary positions
Error handling:

It's easy to check if there are enough operands on the stack before an operation
The final answer should be the only value left on the stack
Using any other container would complicate the implementation without providing any benefits, as stacks directly model the mathematical concept behind RPN evaluation.